import numpy as np; import pandas as pd
import xarray as xr; import matplotlib.pyplot as plt;

class assemble:
    
        def __init__(self, obj_id, paths ):
            self.name = obj_id['name'];
            self.type = obj_id['type'];
            self.project = obj_id['project']; 
            self.limits = obj_id['limits'];
            self.files = paths; 
            
            # Now list properties that will be generated by class methods.
            self.grids = dict(); # they will be pandas, numpy, and xarray objects.
            self.vars = dict(); 
            
        def retrieve(self,filename, fileformat):
            
            if fileformat == 'netcdf':
                dataset = xr.open_dataset(filename);
            elif fileformat == 'mat':
                dataset = sio.loadmat(filename);

            return dataset
            
        def cyclethru(self):
            filelist = self.files.copy();
            print( [self.files[kk]  for kk in range(len(filelist))] );
            
        def storevar(self,filename,varname,limits='none'):
            # This method will:
            # 1. Load dataset from "file"
            dataset = [self.retrieve(filepath,'netcdf') for filepath in filename];
            
            # 2. Extract variable grid from "varname" in that dataset. 
            myvar = [dataset[kk][varname] for kk in range(len(filename))];
            #        If cut=True, load only a slice into memory 
            if isinstance(limits, dict):
                if limits['t0'] != 'none':
                    myvar = [myvar[kk].sel(time=slice(limits['t0'],limits['t1'])) for kk in range(len(filename))];
                
            # 3. Store variable grid inside of self.grids.
            self.grids[varname] = myvar;

            
        def gridtime(self, varname):
            gridobj = self.grids[varname];
            
            
        def printgrid(self,varname, axobj, axind, cut=False):
            mygrids = self.grids[varname[kk]];                                                                                                                                                                         
            
            # Put all in the same figure axis
            axobj[axind].pcolormesh(  )